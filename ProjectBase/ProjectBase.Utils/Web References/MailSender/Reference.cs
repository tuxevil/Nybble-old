//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace ProjectBase.Utils.MailSender {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MailSoap", Namespace="http://mailservice.grundfos.app.nybblenetwork.com/")]
    public partial class Mail : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailWithAttachmentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Mail() {
            this.Url = global::ProjectBase.Utils.Properties.Settings.Default.ProjectBase_Utils_MailSender_Mail;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendEmailCompletedEventHandler SendEmailCompleted;
        
        /// <remarks/>
        public event SendEmailWithAttachmentCompletedEventHandler SendEmailWithAttachmentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mailservice.grundfos.app.nybblenetwork.com/SendEmail", RequestNamespace="http://mailservice.grundfos.app.nybblenetwork.com/", ResponseNamespace="http://mailservice.grundfos.app.nybblenetwork.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendEmail(string from, string to, string subject, string body, string replyToAddress, string replyToName) {
            this.Invoke("SendEmail", new object[] {
                        from,
                        to,
                        subject,
                        body,
                        replyToAddress,
                        replyToName});
        }
        
        /// <remarks/>
        public void SendEmailAsync(string from, string to, string subject, string body, string replyToAddress, string replyToName) {
            this.SendEmailAsync(from, to, subject, body, replyToAddress, replyToName, null);
        }
        
        /// <remarks/>
        public void SendEmailAsync(string from, string to, string subject, string body, string replyToAddress, string replyToName, object userState) {
            if ((this.SendEmailOperationCompleted == null)) {
                this.SendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailOperationCompleted);
            }
            this.InvokeAsync("SendEmail", new object[] {
                        from,
                        to,
                        subject,
                        body,
                        replyToAddress,
                        replyToName}, this.SendEmailOperationCompleted, userState);
        }
        
        private void OnSendEmailOperationCompleted(object arg) {
            if ((this.SendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mailservice.grundfos.app.nybblenetwork.com/SendEmailWithAttachment", RequestNamespace="http://mailservice.grundfos.app.nybblenetwork.com/", ResponseNamespace="http://mailservice.grundfos.app.nybblenetwork.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendEmailWithAttachment(string from, string to, string subject, string body, string replyToAddress, string replyToName, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent) {
            this.Invoke("SendEmailWithAttachment", new object[] {
                        from,
                        to,
                        subject,
                        body,
                        replyToAddress,
                        replyToName,
                        filename,
                        fileContent});
        }
        
        /// <remarks/>
        public void SendEmailWithAttachmentAsync(string from, string to, string subject, string body, string replyToAddress, string replyToName, string filename, byte[] fileContent) {
            this.SendEmailWithAttachmentAsync(from, to, subject, body, replyToAddress, replyToName, filename, fileContent, null);
        }
        
        /// <remarks/>
        public void SendEmailWithAttachmentAsync(string from, string to, string subject, string body, string replyToAddress, string replyToName, string filename, byte[] fileContent, object userState) {
            if ((this.SendEmailWithAttachmentOperationCompleted == null)) {
                this.SendEmailWithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailWithAttachmentOperationCompleted);
            }
            this.InvokeAsync("SendEmailWithAttachment", new object[] {
                        from,
                        to,
                        subject,
                        body,
                        replyToAddress,
                        replyToName,
                        filename,
                        fileContent}, this.SendEmailWithAttachmentOperationCompleted, userState);
        }
        
        private void OnSendEmailWithAttachmentOperationCompleted(object arg) {
            if ((this.SendEmailWithAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailWithAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SendEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SendEmailWithAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591